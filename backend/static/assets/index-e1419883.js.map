{"version":3,"file":"index-e1419883.js","sources":["../../../frontend/src/assets/github.svg","../../../frontend/src/pages/layout/Layout.tsx","../../../frontend/src/pages/NoPage.tsx","../../../frontend/src/api/api.ts","../../../frontend/src/api/models.ts","../../../frontend/src/components/Answer/AnswerParser.tsx","../../../frontend/src/components/Answer/AnswerIcon.tsx","../../../frontend/src/components/Answer/Answer.tsx","../../../frontend/src/components/Answer/AnswerLoading.tsx","../../../frontend/src/components/Answer/AnswerError.tsx","../../../frontend/src/components/QuestionInput/QuestionInput.tsx","../../../frontend/src/components/Example/Example.tsx","../../../frontend/src/components/Example/ExampleList.tsx","../../../frontend/src/components/SupportingContent/SupportingContentParser.ts","../../../frontend/src/components/SupportingContent/SupportingContent.tsx","../../../frontend/src/components/AnalysisPanel/AnalysisPanelTabs.tsx","../../../frontend/src/components/AnalysisPanel/AnalysisPanel.tsx","../../../frontend/src/components/SettingsButton/SettingsButton.tsx","../../../frontend/src/pages/oneshot/OneShot.tsx","../../../frontend/src/components/UserChatMessage/UserChatMessage.tsx","../../../frontend/src/components/ClearChatButton/ClearChatButton.tsx","../../../frontend/src/pages/chat/Chat.tsx","../../../frontend/src/components/FilesViewer/FilesViewer.tsx","../../../frontend/src/pages/fileViewer/Files.tsx","../../../frontend/src/index.tsx"],"sourcesContent":["export default \"__VITE_ASSET__4e6ad5ae__\"","import { Outlet, NavLink, Link } from \"react-router-dom\";\r\n\r\nimport github from \"../../assets/github.svg\";\r\n\r\nimport styles from \"./Layout.module.css\";\r\n\r\nconst Layout = () => {\r\n    return (\r\n        <div className={styles.layout}>\r\n            <header className={styles.header} role={\"banner\"}>\r\n                <div className={styles.headerContainer}>\r\n                    <Link to=\"/\" className={styles.headerTitleContainer}>\r\n                        <h3 className={styles.headerTitle}>GPT + Enterprise data | Sample</h3>\r\n                    </Link>\r\n                    <nav>\r\n                        <ul className={styles.headerNavList}>\r\n                            <li>\r\n                                <NavLink to=\"/\" className={({ isActive }) => (isActive ? styles.headerNavPageLinkActive : styles.headerNavPageLink)}>\r\n                                    Chat\r\n                                </NavLink>\r\n                            </li>\r\n                            <li className={styles.headerNavLeftMargin}>\r\n                                <NavLink to=\"/qa\" className={({ isActive }) => (isActive ? styles.headerNavPageLinkActive : styles.headerNavPageLink)}>\r\n                                    Ask a question\r\n                                </NavLink>\r\n                            </li>\r\n                            {/* <li className={styles.headerNavLeftMargin}>\r\n                                <NavLink to=\"/files\" className={({ isActive}) => (isActive ? styles.headerNavPageLinkActive : styles.headerNavPageLink)}>\r\n                                    Files Viewer\r\n                                </NavLink>\r\n                            </li> */}\r\n                            <li className={styles.headerNavLeftMargin}>\r\n                                <a href=\"https://aka.ms/entgptsearch\" target={\"_blank\"} title=\"Github repository link\">\r\n                                    <img\r\n                                        src={github}\r\n                                        alt=\"Github logo\"\r\n                                        aria-label=\"Link to github repository\"\r\n                                        width=\"20px\"\r\n                                        height=\"20px\"\r\n                                        className={styles.githubLogo}\r\n                                    />\r\n                                </a>\r\n                            </li>\r\n                        </ul>\r\n                    </nav>\r\n                    <h4 className={styles.headerRightText}>Azure OpenAI + Cognitive Search</h4>\r\n                </div>\r\n            </header>\r\n\r\n            <Outlet />\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Layout;\r\n","const NoPage = () => {\r\n    return <h1>404</h1>;\r\n};\r\n\r\nexport default NoPage;\r\n","import { AskRequest, AskResponse, ChatRequest, ReadRequest, AskBingRequest, AskBingResponse } from \"./models\";\r\nimport {SpeechConfig, AudioConfig, SpeechSynthesizer, ResultReason} from \"microsoft-cognitiveservices-speech-sdk\"\r\n\r\n\r\nexport async function askBing(options: AskBingRequest): Promise<AskBingResponse> {\r\n    const response = await fetch(\"/askBing\", {\r\n        method: \"POST\",\r\n        headers: {\r\n            \"Content-Type\": \"application/json\"\r\n        },\r\n        body: JSON.stringify({\r\n            question: options.question,\r\n            approach: options.approach,\r\n            overrides: {\r\n                semantic_ranker: options.overrides?.semanticRanker,\r\n                semantic_captions: options.overrides?.semanticCaptions,\r\n                top: options.overrides?.top,\r\n                temperature: options.overrides?.temperature,\r\n                prompt_template: options.overrides?.promptTemplate,\r\n                prompt_template_prefix: options.overrides?.promptTemplatePrefix,\r\n                prompt_template_suffix: options.overrides?.promptTemplateSuffix,\r\n                exclude_category: options.overrides?.excludeCategory\r\n            }\r\n        })\r\n    });\r\n\r\n    const parsedResponse: AskBingResponse = await response.json();\r\n    if (response.status > 299 || !response.ok) {\r\n        throw Error(parsedResponse.error || \"Unknown error\");\r\n    }\r\n\r\n    return parsedResponse;\r\n}\r\n\r\nexport async function askApi(options: AskRequest): Promise<AskResponse> {\r\n    const response = await fetch(\"/ask\", {\r\n        method: \"POST\",\r\n        headers: {\r\n            \"Content-Type\": \"application/json\"\r\n        },\r\n        body: JSON.stringify({\r\n            question: options.question,\r\n            approach: options.approach,\r\n            overrides: {\r\n                semantic_ranker: options.overrides?.semanticRanker,\r\n                semantic_captions: options.overrides?.semanticCaptions,\r\n                top: options.overrides?.top,\r\n                temperature: options.overrides?.temperature,\r\n                prompt_template: options.overrides?.promptTemplate,\r\n                prompt_template_prefix: options.overrides?.promptTemplatePrefix,\r\n                prompt_template_suffix: options.overrides?.promptTemplateSuffix,\r\n                exclude_category: options.overrides?.excludeCategory\r\n            }\r\n        })\r\n    });\r\n\r\n    const parsedResponse: AskResponse = await response.json();\r\n    if (response.status > 299 || !response.ok) {\r\n        throw Error(parsedResponse.error || \"Unknown error\");\r\n    }\r\n\r\n    return parsedResponse;\r\n}\r\n\r\nexport async function chatApi(options: ChatRequest): Promise<AskResponse> {\r\n    const response = await fetch(\"/chat\", {\r\n        method: \"POST\",\r\n        headers: {\r\n            \"Content-Type\": \"application/json\"\r\n        },\r\n        body: JSON.stringify({\r\n            history: options.history,\r\n            approach: options.approach,\r\n            overrides: {\r\n                semantic_ranker: options.overrides?.semanticRanker,\r\n                semantic_captions: options.overrides?.semanticCaptions,\r\n                top: options.overrides?.top,\r\n                temperature: options.overrides?.temperature,\r\n                prompt_template: options.overrides?.promptTemplate,\r\n                prompt_template_prefix: options.overrides?.promptTemplatePrefix,\r\n                prompt_template_suffix: options.overrides?.promptTemplateSuffix,\r\n                exclude_category: options.overrides?.excludeCategory,\r\n                suggest_followup_questions: options.overrides?.suggestFollowupQuestions,\r\n                use_bing_search: options.overrides?.useBingSearch\r\n            }\r\n        })\r\n    });\r\n\r\n    const parsedResponse: AskResponse = await response.json();\r\n    if (response.status > 299 || !response.ok) {\r\n        throw Error(parsedResponse.error || \"Unknown error\");\r\n    }\r\n\r\n    return parsedResponse;\r\n}\r\n\r\nexport async function readApi(options: ReadRequest): Promise<void>{\r\n    const speech_key = \"\"\r\n    const speech_region = \"southcentralus\"\r\n    var speechConfig = SpeechConfig.fromSubscription(speech_key,speech_region);\r\n    const audioConfig = AudioConfig.fromDefaultSpeakerOutput();\r\n    // The language of the voice that speaks.\r\n    speechConfig.speechSynthesisVoiceName = \"zh-CN-YunxiNeural\"; \r\n    const synthesizer = new SpeechSynthesizer(speechConfig, audioConfig);\r\n    const text = options.answer;\r\n    const modified_text = text.replace(/\\[[^\\]]*\\]/g, \"\"); \r\n    console.log(options.answer);\r\n    synthesizer.speakTextAsync(modified_text,\r\n        function (result) {\r\n      if (result.reason === ResultReason.SynthesizingAudioCompleted) {\r\n        console.log(\"synthesis finished.\");\r\n      } else {\r\n        console.error(\"Speech synthesis canceled, \" + result.errorDetails +\r\n            \"\\nDid you set the speech resource key and region values?\");\r\n      }\r\n      synthesizer.close();\r\n    },\r\n        function (err) {\r\n      console.trace(\"err - \" + err);\r\n      synthesizer.close();\r\n    });\r\n\r\n}\r\nexport function getCitationFilePath(citation: string): string {\r\n    return `/content/${citation}`;\r\n}\r\n","export const enum Approaches {\r\n    RetrieveThenRead = \"rtr\",\r\n    ReadRetrieveRead = \"rrr\",\r\n    ReadDecomposeAsk = \"rda\"\r\n}\r\n\r\nexport const enum CustomApproaches {\r\n    BingSearch = \"bing\"\r\n}\r\n\r\nexport type AskRequestOverrides = {\r\n    semanticRanker?: boolean;\r\n    semanticCaptions?: boolean;\r\n    excludeCategory?: string;\r\n    top?: number;\r\n    temperature?: number;\r\n    promptTemplate?: string;\r\n    promptTemplatePrefix?: string;\r\n    promptTemplateSuffix?: string;\r\n    suggestFollowupQuestions?: boolean;\r\n    useBingSearch?: boolean;\r\n};\r\n\r\nexport type AskRequest = {\r\n    question: string;\r\n    approach: Approaches;\r\n    overrides?: AskRequestOverrides;\r\n};\r\n\r\nexport type AskResponse = {\r\n    answer: string;\r\n    thoughts: string | null;\r\n    data_points: string;\r\n    error?: string;\r\n};\r\n\r\nexport type AskBingRequest = {\r\n    question: string;\r\n    approach: CustomApproaches;\r\n    overrides?: AskRequestOverrides;\r\n};\r\n\r\nexport type AskBingResponse = {\r\n    answer: string;\r\n    thoughts: string | null;\r\n    data_points: string[];\r\n    error?: string;\r\n};\r\n\r\n\r\nexport type ChatTurn = {\r\n    user: string;\r\n    bot?: string;\r\n};\r\n\r\nexport type ChatRequest = {\r\n    history: ChatTurn[];\r\n    approach: Approaches;\r\n    overrides?: AskRequestOverrides;\r\n};\r\n\r\nexport type ReadRequest = {\r\n    answer: string;\r\n}\r\n\r\nexport type File = {\r\n    fileName: string;\r\n    filePath: string;\r\n    parsed: boolean;\r\n}","import { renderToStaticMarkup } from \"react-dom/server\";\r\nimport { getCitationFilePath } from \"../../api\";\r\n\r\ntype HtmlParsedAnswer = {\r\n    answerHtml: string;\r\n    citations: Citation[];\r\n    followupQuestions: string[];\r\n};\r\n\r\ntype Citation = {\r\n    id: number;\r\n    name: string;\r\n    path: string;\r\n};\r\n\r\nexport function parseAnswerToHtml(answer: string, onCitationClicked: (citationFilePath: string) => void): HtmlParsedAnswer {\r\n    const citations: Citation[] = [];\r\n    const followupQuestions: string[] = [];\r\n\r\n    // Extract any follow-up questions that might be in the answer\r\n    let parsedAnswer = answer.replace(/<<([^>>]+)>>/g, (match, content) => {\r\n        followupQuestions.push(content);\r\n        return \"\";\r\n    });\r\n\r\n    // trim any whitespace from the end of the answer after removing follow-up questions\r\n    parsedAnswer = parsedAnswer.trim();\r\n\r\n    // find information in string like '[info1.txt](http://www.example.com/info1.txt): info1' and extract info1.txt and http://www.example.com/info1.txt to be used as a link\r\n    // parsedAnswer = parsedAnswer.replace(/\\[([^\\]]+)\\]\\(([^\\)]+)\\)/g, (match, content, url) => {\r\n    //     const path = getCitationFilePath(content);\r\n    //     return renderToStaticMarkup(\r\n    //         <a className=\"supContainer\" title={content} onClick={() => onCitationClicked(path)}>\r\n    //             {content}\r\n    //         </a>\r\n    //     );\r\n    // });\r\n\r\n\r\n    // const parts = parsedAnswer.split(/\\[([^\\]]+)\\]/g);\r\n    const parts = parsedAnswer.split(/\\[([^\\]]+)\\]+\\(([^\\)]+)\\)/g);\r\n    // const part_paths = parsedAnswer.split(/\\(([^\\)]+)\\)/g);\r\n\r\n    console.log(parts);\r\n\r\n    let citation_map = parsedAnswer.match(/\\[([^\\]]+)\\]+\\(([^\\)]+)\\)/g) ;\r\n    console.log(citation_map);\r\n\r\n    citation_map ? citation_map.map((citation, index) => {\r\n        const name = citation.split(\"]\")[0].replace(\"[\", \"\");\r\n        const path = citation.split(\"]\")[1].replace(\"(\", \"\").replace(\")\", \"\");\r\n        console.log(name);\r\n        console.log(path);\r\n        citations.push({\r\n            id: index,\r\n            name: name,\r\n            path: path\r\n        });\r\n    }) : [];\r\n\r\n    const fragments: string[] = parts.map((part, index) => {\r\n        if (index % 3 === 0) {\r\n            return part;\r\n        } else if(index % 3 == 1){\r\n            // let citationIndex: number;\r\n            let cite = citations.find((citation) => citation.name == part);\r\n\r\n            let citationIndex = cite? cite.id : -1;\r\n\r\n            if (citationIndex !== -1) {\r\n                citationIndex = cite ? cite.id + 1 : -1;\r\n            } else {\r\n                // citations.push(part);\r\n                citationIndex = citations.length;\r\n            }\r\n\r\n            // console.log(parts);\r\n\r\n            const path = getCitationFilePath(part);\r\n\r\n            return renderToStaticMarkup(\r\n                <a className=\"supContainer\" title={part} onClick={() => onCitationClicked(path)}>\r\n                    <sup>{citationIndex}</sup>\r\n                </a>\r\n            );\r\n        } else{\r\n            return \"\";\r\n        }\r\n    });\r\n\r\n    return {\r\n        answerHtml: fragments.join(\"\"),\r\n        citations,\r\n        followupQuestions\r\n    };\r\n}\r\n","import { Sparkle28Filled } from \"@fluentui/react-icons\";\r\n\r\nexport const AnswerIcon = () => {\r\n    return <Sparkle28Filled primaryFill={\"rgba(115, 118, 225, 1)\"} aria-hidden=\"true\" aria-label=\"Answer logo\" />;\r\n};\r\n","import { useMemo } from \"react\";\r\nimport { Stack, IconButton } from \"@fluentui/react\";\r\nimport DOMPurify from \"dompurify\";\r\n\r\nimport styles from \"./Answer.module.css\";\r\n\r\nimport { AskResponse, getCitationFilePath } from \"../../api\";\r\nimport { parseAnswerToHtml } from \"./AnswerParser\";\r\nimport { AnswerIcon } from \"./AnswerIcon\";\r\n\r\ninterface Props {\r\n    answer: AskResponse;\r\n    isSelected?: boolean;\r\n    onCitationClicked: (filePath: string) => void;\r\n    onThoughtProcessClicked: () => void;\r\n    onSupportingContentClicked: () => void;\r\n    onFollowupQuestionClicked?: (question: string) => void;\r\n    onReadAnswerClicked: () => void;\r\n    showFollowupQuestions?: boolean;\r\n}\r\n\r\nexport const Answer = ({\r\n    answer,\r\n    isSelected,\r\n    onCitationClicked,\r\n    onThoughtProcessClicked,\r\n    onSupportingContentClicked,\r\n    onFollowupQuestionClicked,\r\n    onReadAnswerClicked,\r\n    showFollowupQuestions\r\n}: Props) => {\r\n    const parsedAnswer = useMemo(() => parseAnswerToHtml(answer.answer, onCitationClicked), [answer]);\r\n\r\n    const sanitizedAnswerHtml = DOMPurify.sanitize(parsedAnswer.answerHtml);\r\n\r\n    return (\r\n        <Stack className={`${styles.answerContainer} ${isSelected && styles.selected}`} verticalAlign=\"space-between\">\r\n            <Stack.Item>\r\n                <Stack horizontal horizontalAlign=\"space-between\">\r\n                    <AnswerIcon />\r\n                    <div>\r\n                        <IconButton\r\n                            style={{ color: \"black\" }}\r\n                            iconProps={{ iconName: \"Lightbulb\" }}\r\n                            title=\"Show thought process\"\r\n                            ariaLabel=\"Show thought process\"\r\n                            onClick={() => onThoughtProcessClicked()}\r\n                            disabled={!answer.thoughts}\r\n                        />\r\n                        <IconButton\r\n                            style={{ color: \"black\" }}\r\n                            iconProps={{ iconName: \"ClipboardList\" }}\r\n                            title=\"Show supporting content\"\r\n                            ariaLabel=\"Show supporting content\"\r\n                            onClick={() => onSupportingContentClicked()}\r\n                            disabled={!answer.data_points.length}\r\n                        />\r\n                        <IconButton\r\n                            style={{color: \"black\"}}\r\n                            iconProps={{ iconName: \"ReadOutLoud\"}}\r\n                            title=\"Read answer\"\r\n                            ariaLabel=\"Read answer\"\r\n                            onClick={() => onReadAnswerClicked()}\r\n                            disabled= {!answer.answer}\r\n                        />\r\n                    </div>\r\n                </Stack>\r\n            </Stack.Item>\r\n\r\n            <Stack.Item grow>\r\n                <div className={styles.answerText} dangerouslySetInnerHTML={{ __html: sanitizedAnswerHtml }}></div>\r\n            </Stack.Item>\r\n\r\n            {!!parsedAnswer.citations.length && (\r\n                <Stack.Item>\r\n                    <Stack horizontal wrap tokens={{ childrenGap: 5 }}>\r\n                        <span className={styles.citationLearnMore}>来源:</span>\r\n                        {parsedAnswer.citations.map((x, i) => {\r\n                            // const path = getCitationFilePath(x);\r\n                            const path = x.path;\r\n                            return (\r\n                                <a key={i} className={styles.citation} title={x.name} onClick={() => onCitationClicked(path)}>\r\n                                    {`${++i}. ${x.name}`}\r\n                                </a>\r\n                            );\r\n                        })}\r\n                    </Stack>\r\n                </Stack.Item>\r\n            )}\r\n\r\n            {!!parsedAnswer.followupQuestions.length && showFollowupQuestions && onFollowupQuestionClicked && (\r\n                <Stack.Item>\r\n                    <Stack horizontal wrap className={`${!!parsedAnswer.citations.length ? styles.followupQuestionsList : \"\"}`} tokens={{ childrenGap: 6 }}>\r\n                        <span className={styles.followupQuestionLearnMore}>您可能还想问:</span>\r\n                        {parsedAnswer.followupQuestions.map((x, i) => {\r\n                            return (\r\n                                <a key={i} className={styles.followupQuestion} title={x} onClick={() => onFollowupQuestionClicked(x)}>\r\n                                    {`${x}`}\r\n                                </a>\r\n                            );\r\n                        })}\r\n                    </Stack>\r\n                </Stack.Item>\r\n            )}\r\n        </Stack>\r\n    );\r\n};\r\n","import { Stack } from \"@fluentui/react\";\r\nimport { animated, useSpring } from \"@react-spring/web\";\r\n\r\nimport styles from \"./Answer.module.css\";\r\nimport { AnswerIcon } from \"./AnswerIcon\";\r\n\r\nexport const AnswerLoading = () => {\r\n    const animatedStyles = useSpring({\r\n        from: { opacity: 0 },\r\n        to: { opacity: 1 }\r\n    });\r\n\r\n    return (\r\n        <animated.div style={{ ...animatedStyles }}>\r\n            <Stack className={styles.answerContainer} verticalAlign=\"space-between\">\r\n                <AnswerIcon />\r\n                <Stack.Item grow>\r\n                    <p className={styles.answerText}>\r\n                        正在生成回答\r\n                        <span className={styles.loadingdots} />\r\n                    </p>\r\n                </Stack.Item>\r\n            </Stack>\r\n        </animated.div>\r\n    );\r\n};\r\n","import { Stack, PrimaryButton } from \"@fluentui/react\";\r\nimport { ErrorCircle24Regular } from \"@fluentui/react-icons\";\r\n\r\nimport styles from \"./Answer.module.css\";\r\n\r\ninterface Props {\r\n    error: string;\r\n    onRetry: () => void;\r\n}\r\n\r\nexport const AnswerError = ({ error, onRetry }: Props) => {\r\n    return (\r\n        <Stack className={styles.answerContainer} verticalAlign=\"space-between\">\r\n            <ErrorCircle24Regular aria-hidden=\"true\" aria-label=\"Error icon\" primaryFill=\"red\" />\r\n\r\n            <Stack.Item grow>\r\n                <p className={styles.answerText}>{error}</p>\r\n            </Stack.Item>\r\n\r\n            <PrimaryButton className={styles.retryButton} onClick={onRetry} text=\"Retry\" />\r\n        </Stack>\r\n    );\r\n};\r\n","import { useState, useEffect } from \"react\";\r\nimport { Stack, TextField } from \"@fluentui/react\";\r\nimport { Send28Filled, BookOpenMicrophone28Regular } from \"@fluentui/react-icons\";\r\nimport {SpeechConfig, AudioConfig, CancellationDetails, ResultReason, SpeechRecognizer, CancellationReason} from \"microsoft-cognitiveservices-speech-sdk\"\r\nimport styles from \"./QuestionInput.module.css\";\r\n\r\ninterface Props {\r\n    onSend: (question: string) => void;\r\n    disabled: boolean;\r\n    placeholder?: string;\r\n    clearOnSend?: boolean;\r\n}\r\n\r\nexport const QuestionInput = ({ onSend, disabled, placeholder, clearOnSend }: Props) => {\r\n    const [question, setQuestion] = useState<string>(\"\");\r\n\r\n    const sendQuestion = () => {\r\n        if (disabled || !question.trim()) {\r\n            console.log('send disabled');\r\n            console.log('question: ' + question);\r\n            return;\r\n        }\r\n\r\n        onSend(question);\r\n\r\n        if (clearOnSend) {\r\n            setQuestion(\"\");\r\n        }\r\n    };\r\n\r\n    const speechToText = () => {\r\n        const speech_key = \"\"\r\n        const speech_region = \"southcentralus\"\r\n        var speechConfig = SpeechConfig.fromSubscription(speech_key,speech_region);\r\n        const audioConfig = AudioConfig.fromDefaultMicrophoneInput();\r\n        speechConfig.speechRecognitionLanguage = \"zh-CN\";\r\n        const speechRecognizer = new SpeechRecognizer(speechConfig, audioConfig);\r\n        speechRecognizer.recognizeOnceAsync(result => {\r\n            switch (result.reason) {\r\n                case ResultReason.RecognizedSpeech:\r\n                    console.log(`RECOGNIZED: Text=${result.text}`);\r\n                    setQuestion(result.text);\r\n                    break;\r\n                case ResultReason.NoMatch:\r\n                    console.log(\"NOMATCH: Speech could not be recognized.\");\r\n                    break;\r\n                case ResultReason.Canceled:\r\n                    const cancellation = CancellationDetails.fromResult(result);\r\n                    console.log(`CANCELED: Reason=${cancellation.reason}`);\r\n    \r\n                    if (cancellation.reason == CancellationReason.Error) {\r\n                        console.log(`CANCELED: ErrorCode=${cancellation.ErrorCode}`);\r\n                        console.log(`CANCELED: ErrorDetails=${cancellation.errorDetails}`);\r\n                        console.log(\"CANCELED: Did you set the speech resource key and region values?\");\r\n                    }\r\n                    break;\r\n            }\r\n            speechRecognizer.close();\r\n        });\r\n    }\r\n    const onEnterPress = (ev: React.KeyboardEvent<Element>) => {\r\n        if (ev.key === \"Enter\" && !ev.shiftKey) {\r\n            ev.preventDefault();\r\n            sendQuestion();\r\n        }\r\n    };\r\n\r\n    const onQuestionChange = (_ev: React.FormEvent<HTMLInputElement | HTMLTextAreaElement>, newValue?: string) => {\r\n        if (!newValue) {\r\n            setQuestion(\"\");\r\n        } else if (newValue.length <= 1000) {\r\n            setQuestion(newValue);\r\n        }\r\n    };\r\n\r\n    const sendQuestionDisabled = disabled || !question.trim();\r\n\r\n    return (\r\n        <Stack horizontal className={styles.questionInputContainer}>\r\n            <TextField\r\n                className={styles.questionInputTextArea}\r\n                placeholder={placeholder}\r\n                multiline\r\n                resizable={false}\r\n                borderless\r\n                value={question}\r\n                onChange={onQuestionChange}\r\n                onKeyDown={onEnterPress}\r\n            />\r\n            <div className={styles.questionInputButtonsContainer}>\r\n                <div\r\n                    className={`${styles.questionInputSendButton} ${sendQuestionDisabled ? styles.questionInputSendButtonDisabled : \"\"}`}\r\n                    aria-label=\"语音输入\"\r\n                    onClick={speechToText}\r\n                >\r\n                    <BookOpenMicrophone28Regular primaryFill=\"rgba(115, 118, 225, 1)\" />\r\n                </div>\r\n                <div\r\n                    className={`${styles.questionInputSendButton} ${sendQuestionDisabled ? styles.questionInputSendButtonDisabled : \"\"}`}\r\n                    aria-label=\"提问按钮\"\r\n                    onClick={sendQuestion}\r\n                >\r\n                    <Send28Filled primaryFill=\"rgba(115, 118, 225, 1)\" />\r\n                </div>\r\n            </div>\r\n        </Stack>\r\n    );\r\n};\r\n","import styles from \"./Example.module.css\";\r\n\r\ninterface Props {\r\n    text: string;\r\n    value: string;\r\n    onClick: (value: string) => void;\r\n}\r\n\r\nexport const Example = ({ text, value, onClick }: Props) => {\r\n    return (\r\n        <div className={styles.example} onClick={() => onClick(value)}>\r\n            <p className={styles.exampleText}>{text}</p>\r\n        </div>\r\n    );\r\n};\r\n","import { Example } from \"./Example\";\r\n\r\nimport styles from \"./Example.module.css\";\r\n\r\nexport type ExampleModel = {\r\n    text: string;\r\n    value: string;\r\n};\r\n\r\nconst EXAMPLES: ExampleModel[] = [\r\n    {\r\n        text: \"试剂盘有异响是什么原因，怎么解决?\",\r\n        value: \"试剂盘有异响是什么原因，怎么解决?\"\r\n    },\r\n    { text: \"建立真空失败是什么原因？怎么解决\", value: \"建立真空失败是什么原因？怎么解决\" },\r\n    { text: \"面壳的下单编码和物料名称有哪些\", value: \"面壳的下单编码和物料名称有哪些\" }\r\n];\r\n\r\ninterface Props {\r\n    onExampleClicked: (value: string) => void;\r\n}\r\n\r\nexport const ExampleList = ({ onExampleClicked }: Props) => {\r\n    return (\r\n        <ul className={styles.examplesNavList}>\r\n            {EXAMPLES.map((x, i) => (\r\n                <li key={i}>\r\n                    <Example text={x.text} value={x.value} onClick={onExampleClicked} />\r\n                </li>\r\n            ))}\r\n        </ul>\r\n    );\r\n};\r\n","type ParsedSupportingContentItem = {\r\n    title: string;\r\n    content: string;\r\n    url: string;\r\n};\r\n\r\n// export function parseSupportingContentItem(item: string): ParsedSupportingContentItem {\r\n//     // Assumes the item starts with the file name followed by : and the content.\r\n//     // Example: \"sdp_corporate.pdf: this is the content that follows\".\r\n//     const parts = item.split(\": \");\r\n//     const title = parts[0];\r\n//     var content = parts.slice(1).join(\": \") ? parts.slice(1).join(\": \") : \"No content\";\r\n    \r\n//     //Extrace string in '<>' in content, example: info1.txt: abc <http://www.google.com>\r\n//     const url = content.match(/<([^>]+)>/);\r\n\r\n//     //Replace string in '<>' in content, example: info1.txt: abc <http://www.google.com>\r\n//     content = content.replace(/<([^>]+)>/g, \"\");\r\n    \r\n    \r\n\r\n//     return {\r\n//         title,\r\n//         content,\r\n//         url: url ? url[1] : \"\"\r\n//     };\r\n// }\r\nexport function parseSupportingContentItem(item: string): ParsedSupportingContentItem {\r\n    // Assumes the item starts with the file name followed by : and the content.\r\n    // Example: {\"sourcepage\": \"sdp_corporate.pdf\", \"content\": \"this is the content that follows\", \"sourcepage_path\":\"http://www.sampledomain.com/sdp_corporate.pdf\"}.\r\n    const itemj = eval(item)\r\n\r\n    const title = itemj.sourcepage;\r\n    const content = itemj.content;\r\n    const url = itemj.sourcepage_path;\r\n\r\n    return {\r\n        title,\r\n        content,\r\n        url: url ? url : \"\"\r\n    };\r\n}\r\n","import { parseSupportingContentItem } from \"./SupportingContentParser\";\r\n\r\nimport styles from \"./SupportingContent.module.css\";\r\n\r\ninterface Props {\r\n    supportingContent: string;\r\n}\r\n\r\nexport const SupportingContent = ({ supportingContent }: Props) => {\r\n    console.log('supportingContent' + supportingContent)\r\n    const supportingContentList = eval(supportingContent)\r\n    console.log('supportingContentList' + supportingContentList)\r\n    return (\r\n        <ul className={styles.supportingContentNavList}>\r\n            {supportingContentList.map((x: any, i: any) => {\r\n                const parsed = parseSupportingContentItem(x);\r\n\r\n                return (\r\n                    <li className={styles.supportingContentItem} key={i}>\r\n                        <h4 className={styles.supportingContentItemHeader}>{parsed.title}</h4>\r\n                        <p className={styles.supportingContentItemText}>{parsed.content}</p>\r\n                        <a className={styles.supportingContentItemText} href={parsed.url} target=\"_blank\">{parsed.url}</a>\r\n                    </li>\r\n                );\r\n            })}\r\n        </ul>\r\n    );\r\n};\r\n","export enum AnalysisPanelTabs {\r\n    ThoughtProcessTab = \"thoughtProcess\",\r\n    SupportingContentTab = \"supportingContent\",\r\n    CitationTab = \"citation\"\r\n}\r\n","import { Pivot, PivotItem } from \"@fluentui/react\";\r\nimport DOMPurify from \"dompurify\";\r\n\r\nimport styles from \"./AnalysisPanel.module.css\";\r\n\r\nimport { SupportingContent } from \"../SupportingContent\";\r\nimport { AskResponse } from \"../../api\";\r\nimport { AnalysisPanelTabs } from \"./AnalysisPanelTabs\";\r\n\r\ninterface Props {\r\n    className: string;\r\n    activeTab: AnalysisPanelTabs;\r\n    onActiveTabChanged: (tab: AnalysisPanelTabs) => void;\r\n    activeCitation: string | undefined;\r\n    citationHeight: string;\r\n    answer: AskResponse;\r\n}\r\n\r\nconst pivotItemDisabledStyle = { disabled: true, style: { color: \"grey\" } };\r\n\r\nexport const AnalysisPanel = ({ answer, activeTab, activeCitation, citationHeight, className, onActiveTabChanged }: Props) => {\r\n    const isDisabledThoughtProcessTab: boolean = !answer.thoughts;\r\n    const isDisabledSupportingContentTab: boolean = !answer.data_points.length;\r\n    const isDisabledCitationTab: boolean = !activeCitation;\r\n\r\n    const sanitizedThoughts = DOMPurify.sanitize(answer.thoughts!);\r\n\r\n    return (\r\n        <Pivot\r\n            className={className}\r\n            selectedKey={activeTab}\r\n            onLinkClick={pivotItem => pivotItem && onActiveTabChanged(pivotItem.props.itemKey! as AnalysisPanelTabs)}\r\n        >\r\n            <PivotItem\r\n                itemKey={AnalysisPanelTabs.ThoughtProcessTab}\r\n                headerText=\"思维过程\"\r\n                headerButtonProps={isDisabledThoughtProcessTab ? pivotItemDisabledStyle : undefined}\r\n            >\r\n                <div className={styles.thoughtProcess} dangerouslySetInnerHTML={{ __html: sanitizedThoughts }}></div>\r\n                {/* <div className={styles.thoughtProcess} > {sanitizedThoughts }</div> */}\r\n            </PivotItem>\r\n            <PivotItem\r\n                itemKey={AnalysisPanelTabs.SupportingContentTab}\r\n                headerText=\"支持内容\"\r\n                headerButtonProps={isDisabledSupportingContentTab ? pivotItemDisabledStyle : undefined}\r\n            >\r\n                <SupportingContent supportingContent={answer.data_points} />\r\n            </PivotItem>\r\n            <PivotItem\r\n                itemKey={AnalysisPanelTabs.CitationTab}\r\n                headerText=\"引用\"\r\n                headerButtonProps={isDisabledCitationTab ? pivotItemDisabledStyle : undefined}\r\n            >\r\n                <iframe title=\"引用\" src={activeCitation} width=\"100%\" height={citationHeight} />\r\n            </PivotItem>\r\n        </Pivot>\r\n    );\r\n};\r\n","import { Text } from \"@fluentui/react\";\r\nimport { Settings24Regular } from \"@fluentui/react-icons\";\r\n\r\nimport styles from \"./SettingsButton.module.css\";\r\n\r\ninterface Props {\r\n    className?: string;\r\n    onClick: () => void;\r\n}\r\n\r\nexport const SettingsButton = ({ className, onClick }: Props) => {\r\n    return (\r\n        <div className={`${styles.container} ${className ?? \"\"}`} onClick={onClick}>\r\n            <Settings24Regular />\r\n            <Text>{\"开发人员配置\"}</Text>\r\n        </div>\r\n    );\r\n};\r\n","import { useRef, useState } from \"react\";\r\nimport { Checkbox, ChoiceGroup, IChoiceGroupOption, Panel, DefaultButton, Spinner, TextField, SpinButton } from \"@fluentui/react\";\r\n\r\nimport styles from \"./OneShot.module.css\";\r\n\r\nimport { askApi, Approaches, AskResponse, AskRequest } from \"../../api\";\r\nimport { Answer, AnswerError } from \"../../components/Answer\";\r\nimport { QuestionInput } from \"../../components/QuestionInput\";\r\nimport { ExampleList } from \"../../components/Example\";\r\nimport { AnalysisPanel, AnalysisPanelTabs } from \"../../components/AnalysisPanel\";\r\nimport { SettingsButton } from \"../../components/SettingsButton/SettingsButton\";\r\n\r\nconst OneShot = () => {\r\n    const [isConfigPanelOpen, setIsConfigPanelOpen] = useState(false);\r\n    const [approach, setApproach] = useState<Approaches>(Approaches.ReadDecomposeAsk);\r\n    const [promptTemplate, setPromptTemplate] = useState<string>(\"\");\r\n    const [promptTemplatePrefix, setPromptTemplatePrefix] = useState<string>(\"\");\r\n    const [promptTemplateSuffix, setPromptTemplateSuffix] = useState<string>(\"\");\r\n    const [retrieveCount, setRetrieveCount] = useState<number>(3);\r\n    const [useSemanticRanker, setUseSemanticRanker] = useState<boolean>(false);\r\n    const [useSemanticCaptions, setUseSemanticCaptions] = useState<boolean>(false);\r\n    const [excludeCategory, setExcludeCategory] = useState<string>(\"\");\r\n\r\n    const lastQuestionRef = useRef<string>(\"\");\r\n\r\n    const [isLoading, setIsLoading] = useState<boolean>(false);\r\n    const [error, setError] = useState<unknown>();\r\n    const [answer, setAnswer] = useState<AskResponse>();\r\n\r\n    const [activeCitation, setActiveCitation] = useState<string>();\r\n    const [activeAnalysisPanelTab, setActiveAnalysisPanelTab] = useState<AnalysisPanelTabs | undefined>(undefined);\r\n\r\n    const makeApiRequest = async (question: string) => {\r\n        lastQuestionRef.current = question;\r\n\r\n        error && setError(undefined);\r\n        setIsLoading(true);\r\n        setActiveCitation(undefined);\r\n        setActiveAnalysisPanelTab(undefined);\r\n\r\n        try {\r\n            const request: AskRequest = {\r\n                question,\r\n                approach,\r\n                overrides: {\r\n                    promptTemplate: promptTemplate.length === 0 ? undefined : promptTemplate,\r\n                    promptTemplatePrefix: promptTemplatePrefix.length === 0 ? undefined : promptTemplatePrefix,\r\n                    promptTemplateSuffix: promptTemplateSuffix.length === 0 ? undefined : promptTemplateSuffix,\r\n                    excludeCategory: excludeCategory.length === 0 ? undefined : excludeCategory,\r\n                    top: retrieveCount,\r\n                    semanticRanker: useSemanticRanker,\r\n                    semanticCaptions: useSemanticCaptions\r\n                }\r\n            };\r\n            const result = await askApi(request);\r\n            setAnswer(result);\r\n        } catch (e) {\r\n            setError(e);\r\n        } finally {\r\n            setIsLoading(false);\r\n        }\r\n    };\r\n\r\n    const onPromptTemplateChange = (_ev?: React.FormEvent<HTMLInputElement | HTMLTextAreaElement>, newValue?: string) => {\r\n        setPromptTemplate(newValue || \"\");\r\n    };\r\n\r\n    const onPromptTemplatePrefixChange = (_ev?: React.FormEvent<HTMLInputElement | HTMLTextAreaElement>, newValue?: string) => {\r\n        setPromptTemplatePrefix(newValue || \"\");\r\n    };\r\n\r\n    const onPromptTemplateSuffixChange = (_ev?: React.FormEvent<HTMLInputElement | HTMLTextAreaElement>, newValue?: string) => {\r\n        setPromptTemplateSuffix(newValue || \"\");\r\n    };\r\n\r\n    const onRetrieveCountChange = (_ev?: React.SyntheticEvent<HTMLElement, Event>, newValue?: string) => {\r\n        setRetrieveCount(parseInt(newValue || \"3\"));\r\n    };\r\n\r\n    const onApproachChange = (_ev?: React.FormEvent<HTMLElement | HTMLInputElement>, option?: IChoiceGroupOption) => {\r\n        setApproach((option?.key as Approaches) || Approaches.RetrieveThenRead);\r\n    };\r\n\r\n    const onUseSemanticRankerChange = (_ev?: React.FormEvent<HTMLElement | HTMLInputElement>, checked?: boolean) => {\r\n        setUseSemanticRanker(!!checked);\r\n    };\r\n\r\n    const onUseSemanticCaptionsChange = (_ev?: React.FormEvent<HTMLElement | HTMLInputElement>, checked?: boolean) => {\r\n        setUseSemanticCaptions(!!checked);\r\n    };\r\n\r\n    const onExcludeCategoryChanged = (_ev?: React.FormEvent, newValue?: string) => {\r\n        setExcludeCategory(newValue || \"\");\r\n    };\r\n\r\n    const onExampleClicked = (example: string) => {\r\n        makeApiRequest(example);\r\n    };\r\n\r\n    const onShowCitation = (citation: string) => {\r\n        if (activeCitation === citation && activeAnalysisPanelTab === AnalysisPanelTabs.CitationTab) {\r\n            setActiveAnalysisPanelTab(undefined);\r\n        } else {\r\n            setActiveCitation(citation);\r\n            setActiveAnalysisPanelTab(AnalysisPanelTabs.CitationTab);\r\n        }\r\n    };\r\n\r\n    const onToggleTab = (tab: AnalysisPanelTabs) => {\r\n        if (activeAnalysisPanelTab === tab) {\r\n            setActiveAnalysisPanelTab(undefined);\r\n        } else {\r\n            setActiveAnalysisPanelTab(tab);\r\n        }\r\n    };\r\n\r\n    const onReadAnswerClicked = () => {\r\n        alert(\"onReadAnswerClicked\")\r\n    }\r\n\r\n    const approaches: IChoiceGroupOption[] = [\r\n        {\r\n            key: Approaches.RetrieveThenRead,\r\n            text: \"Retrieve-Then-Read\"\r\n        },\r\n        {\r\n            key: Approaches.ReadRetrieveRead,\r\n            text: \"Read-Retrieve-Read\"\r\n        },\r\n        {\r\n            key: Approaches.ReadDecomposeAsk,\r\n            text: \"Read-Decompose-Ask\"\r\n        }\r\n    ];\r\n\r\n    return (\r\n        <div className={styles.oneshotContainer}>\r\n            <div className={styles.oneshotTopSection}>\r\n                <SettingsButton className={styles.settingsButton} onClick={() => setIsConfigPanelOpen(!isConfigPanelOpen)} />\r\n                <h1 className={styles.oneshotTitle}>Ask your data</h1>\r\n                <div className={styles.oneshotQuestionInput}>\r\n                    <QuestionInput\r\n                        placeholder=\"示例:面条是否可以用体外模拟进行GI测试？?\"\r\n                        disabled={isLoading}\r\n                        onSend={question => makeApiRequest(question)}\r\n                    />\r\n                </div>\r\n            </div>\r\n            <div className={styles.oneshotBottomSection}>\r\n                {isLoading && <Spinner label=\"正在生成回答\" />}\r\n                {!lastQuestionRef.current && <ExampleList onExampleClicked={onExampleClicked} />}\r\n                {!isLoading && answer && !error && (\r\n                    <div className={styles.oneshotAnswerContainer}>\r\n                        <Answer\r\n                            answer={answer}\r\n                            onCitationClicked={x => onShowCitation(x)}\r\n                            onThoughtProcessClicked={() => onToggleTab(AnalysisPanelTabs.ThoughtProcessTab)}\r\n                            onSupportingContentClicked={() => onToggleTab(AnalysisPanelTabs.SupportingContentTab)}\r\n                            onReadAnswerClicked={() => onReadAnswerClicked()}\r\n                        />\r\n                    </div>\r\n                )}\r\n                {error ? (\r\n                    <div className={styles.oneshotAnswerContainer}>\r\n                        <AnswerError error={error.toString()} onRetry={() => makeApiRequest(lastQuestionRef.current)} />\r\n                    </div>\r\n                ) : null}\r\n                {activeAnalysisPanelTab && answer && (\r\n                    <AnalysisPanel\r\n                        className={styles.oneshotAnalysisPanel}\r\n                        activeCitation={activeCitation}\r\n                        onActiveTabChanged={x => onToggleTab(x)}\r\n                        citationHeight=\"600px\"\r\n                        answer={answer}\r\n                        activeTab={activeAnalysisPanelTab}\r\n                    />\r\n                )}\r\n            </div>\r\n\r\n            <Panel\r\n                headerText=\"配置\"\r\n                isOpen={isConfigPanelOpen}\r\n                isBlocking={false}\r\n                onDismiss={() => setIsConfigPanelOpen(false)}\r\n                closeButtonAriaLabel=\"Close\"\r\n                onRenderFooterContent={() => <DefaultButton onClick={() => setIsConfigPanelOpen(false)}>Close</DefaultButton>}\r\n                isFooterAtBottom={true}\r\n            >\r\n                <ChoiceGroup\r\n                    className={styles.oneshotSettingsSeparator}\r\n                    label=\"方式\"\r\n                    options={approaches}\r\n                    defaultSelectedKey={approach}\r\n                    onChange={onApproachChange}\r\n                />\r\n\r\n                {(approach === Approaches.RetrieveThenRead || approach === Approaches.ReadDecomposeAsk) && (\r\n                    <TextField\r\n                        className={styles.oneshotSettingsSeparator}\r\n                        defaultValue={promptTemplate}\r\n                        label=\"更改提问模板\"\r\n                        multiline\r\n                        autoAdjustHeight\r\n                        onChange={onPromptTemplateChange}\r\n                    />\r\n                )}\r\n\r\n                {approach === Approaches.ReadRetrieveRead && (\r\n                    <>\r\n                        <TextField\r\n                            className={styles.oneshotSettingsSeparator}\r\n                            defaultValue={promptTemplatePrefix}\r\n                            label=\"更改提问前缀模板\"\r\n                            multiline\r\n                            autoAdjustHeight\r\n                            onChange={onPromptTemplatePrefixChange}\r\n                        />\r\n                        <TextField\r\n                            className={styles.oneshotSettingsSeparator}\r\n                            defaultValue={promptTemplateSuffix}\r\n                            label=\"更改提问后缀模板\"\r\n                            multiline\r\n                            autoAdjustHeight\r\n                            onChange={onPromptTemplateSuffixChange}\r\n                        />\r\n                    </>\r\n                )}\r\n\r\n                <SpinButton\r\n                    className={styles.oneshotSettingsSeparator}\r\n                    label=\"最多从搜索中返回的条目数量:\"\r\n                    min={1}\r\n                    max={50}\r\n                    defaultValue={retrieveCount.toString()}\r\n                    onChange={onRetrieveCountChange}\r\n                />\r\n                <TextField className={styles.oneshotSettingsSeparator} label=\"排除类别\" onChange={onExcludeCategoryChanged} />\r\n                <Checkbox\r\n                    className={styles.oneshotSettingsSeparator}\r\n                    checked={useSemanticRanker}\r\n                    label=\"使用语义搜索\"\r\n                    onChange={onUseSemanticRankerChange}\r\n                />\r\n                <Checkbox\r\n                    className={styles.oneshotSettingsSeparator}\r\n                    checked={useSemanticCaptions}\r\n                    label=\"使用查询上下文摘要而不是整个文档\"\r\n                    onChange={onUseSemanticCaptionsChange}\r\n                    disabled={!useSemanticRanker}\r\n                />\r\n            </Panel>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default OneShot;\r\n","import styles from \"./UserChatMessage.module.css\";\r\n\r\ninterface Props {\r\n    message: string;\r\n}\r\n\r\nexport const UserChatMessage = ({ message }: Props) => {\r\n    return (\r\n        <div className={styles.container}>\r\n            <div className={styles.message}>{message}</div>\r\n        </div>\r\n    );\r\n};\r\n","import { Text } from \"@fluentui/react\";\r\nimport { Delete24Regular } from \"@fluentui/react-icons\";\r\n\r\nimport styles from \"./ClearChatButton.module.css\";\r\n\r\ninterface Props {\r\n    className?: string;\r\n    onClick: () => void;\r\n    disabled?: boolean;\r\n}\r\n\r\nexport const ClearChatButton = ({ className, disabled, onClick }: Props) => {\r\n    return (\r\n        <div className={`${styles.container} ${className ?? \"\"} ${disabled && styles.disabled}`} onClick={onClick}>\r\n            <Delete24Regular />\r\n            <Text>{\"清空对话\"}</Text>\r\n        </div>\r\n    );\r\n};\r\n","import { useRef, useState, useEffect } from \"react\";\r\nimport { Checkbox, Panel, DefaultButton, TextField, SpinButton } from \"@fluentui/react\";\r\nimport { SparkleFilled } from \"@fluentui/react-icons\";\r\n\r\nimport styles from \"./Chat.module.css\";\r\n\r\nimport { chatApi, Approaches, AskResponse, ChatRequest, ChatTurn, ReadRequest, readApi } from \"../../api\";\r\nimport { Answer, AnswerError, AnswerLoading } from \"../../components/Answer\";\r\nimport { QuestionInput } from \"../../components/QuestionInput\";\r\nimport { ExampleList } from \"../../components/Example\";\r\nimport { UserChatMessage } from \"../../components/UserChatMessage\";\r\nimport { AnalysisPanel, AnalysisPanelTabs } from \"../../components/AnalysisPanel\";\r\nimport { SettingsButton } from \"../../components/SettingsButton\";\r\nimport { ClearChatButton } from \"../../components/ClearChatButton\";\r\n\r\nconst Chat = () => {\r\n    const [isConfigPanelOpen, setIsConfigPanelOpen] = useState(false);\r\n    const [promptTemplate, setPromptTemplate] = useState<string>(\"\");\r\n    const [retrieveCount, setRetrieveCount] = useState<number>(6);\r\n    const [useSemanticRanker, setUseSemanticRanker] = useState<boolean>(true);\r\n    const [useSemanticCaptions, setUseSemanticCaptions] = useState<boolean>(true);\r\n    const [excludeCategory, setExcludeCategory] = useState<string>(\"\");\r\n    const [useSuggestFollowupQuestions, setUseSuggestFollowupQuestions] = useState<boolean>(true);\r\n    const [useBingSearch, setUseBingSearch] = useState<boolean>(false);\r\n\r\n    const lastQuestionRef = useRef<string>(\"\");\r\n    const chatMessageStreamEnd = useRef<HTMLDivElement | null>(null);\r\n\r\n    const [isLoading, setIsLoading] = useState<boolean>(false);\r\n    const [error, setError] = useState<unknown>();\r\n\r\n    const [activeCitation, setActiveCitation] = useState<string>();\r\n    const [activeAnalysisPanelTab, setActiveAnalysisPanelTab] = useState<AnalysisPanelTabs | undefined>(undefined);\r\n\r\n    const [selectedAnswer, setSelectedAnswer] = useState<number>(0);\r\n    const [answers, setAnswers] = useState<[user: string, response: AskResponse][]>([]);\r\n\r\n    const makeApiRequest = async (question: string) => {\r\n        lastQuestionRef.current = question;\r\n\r\n        error && setError(undefined);\r\n        setIsLoading(true);\r\n        setActiveCitation(undefined);\r\n        setActiveAnalysisPanelTab(undefined);\r\n\r\n        try {\r\n            const history: ChatTurn[] = answers.map(a => ({ user: a[0], bot: a[1].answer }));\r\n            const request: ChatRequest = {\r\n                history: [...history, { user: question, bot: undefined }],\r\n                approach: Approaches.ReadRetrieveRead,\r\n                overrides: {\r\n                    promptTemplate: promptTemplate.length === 0 ? undefined : promptTemplate,\r\n                    excludeCategory: excludeCategory.length === 0 ? undefined : excludeCategory,\r\n                    top: retrieveCount,\r\n                    semanticRanker: useSemanticRanker,\r\n                    semanticCaptions: useSemanticCaptions,\r\n                    suggestFollowupQuestions: useSuggestFollowupQuestions,\r\n                    useBingSearch: useBingSearch\r\n                }\r\n            };\r\n            const result = await chatApi(request);\r\n            setAnswers([...answers, [question, result]]);\r\n        } catch (e) {\r\n            setError(e);\r\n        } finally {\r\n            setIsLoading(false);\r\n        }\r\n    };\r\n\r\n    const clearChat = () => {\r\n        lastQuestionRef.current = \"\";\r\n        error && setError(undefined);\r\n        setActiveCitation(undefined);\r\n        setActiveAnalysisPanelTab(undefined);\r\n        setAnswers([]);\r\n    };\r\n\r\n    useEffect(() => chatMessageStreamEnd.current?.scrollIntoView({ behavior: \"smooth\" }), [isLoading]);\r\n\r\n    const onPromptTemplateChange = (_ev?: React.FormEvent<HTMLInputElement | HTMLTextAreaElement>, newValue?: string) => {\r\n        setPromptTemplate(newValue || \"\");\r\n    };\r\n\r\n    const onRetrieveCountChange = (_ev?: React.SyntheticEvent<HTMLElement, Event>, newValue?: string) => {\r\n        setRetrieveCount(parseInt(newValue || \"3\"));\r\n    };\r\n\r\n    const onUseSemanticRankerChange = (_ev?: React.FormEvent<HTMLElement | HTMLInputElement>, checked?: boolean) => {\r\n        setUseSemanticRanker(!!checked);\r\n    };\r\n\r\n    const onUseSemanticCaptionsChange = (_ev?: React.FormEvent<HTMLElement | HTMLInputElement>, checked?: boolean) => {\r\n        setUseSemanticCaptions(!!checked);\r\n    };\r\n\r\n    const onExcludeCategoryChanged = (_ev?: React.FormEvent, newValue?: string) => {\r\n        setExcludeCategory(newValue || \"\");\r\n    };\r\n\r\n    const onUseSuggestFollowupQuestionsChange = (_ev?: React.FormEvent<HTMLElement | HTMLInputElement>, checked?: boolean) => {\r\n        setUseSuggestFollowupQuestions(!!checked);\r\n    };\r\n\r\n    const onUseBingSearchChange = (_ev?: React.FormEvent<HTMLElement | HTMLInputElement>, checked?: boolean) => {\r\n        setUseBingSearch(!!checked);\r\n    };\r\n\r\n    const onExampleClicked = (example: string) => {\r\n        makeApiRequest(example);\r\n    };\r\n\r\n    const onShowCitation = (citation: string, index: number) => {\r\n        if (activeCitation === citation && activeAnalysisPanelTab === AnalysisPanelTabs.CitationTab && selectedAnswer === index) {\r\n            setActiveAnalysisPanelTab(undefined);\r\n        } else {\r\n            setActiveCitation(citation);\r\n            setActiveAnalysisPanelTab(AnalysisPanelTabs.CitationTab);\r\n        }\r\n\r\n        setSelectedAnswer(index);\r\n    };\r\n\r\n    const onToggleTab = (tab: AnalysisPanelTabs, index: number) => {\r\n        if (activeAnalysisPanelTab === tab && selectedAnswer === index) {\r\n            setActiveAnalysisPanelTab(undefined);\r\n        } else {\r\n            setActiveAnalysisPanelTab(tab);\r\n        }\r\n\r\n        setSelectedAnswer(index);\r\n    };\r\n\r\n    const onReadAnswer = async (answer: AskResponse, index: number) => {\r\n        setSelectedAnswer(index);\r\n        try {\r\n            const request: ReadRequest = {\r\n                answer: answer.answer\r\n            };\r\n            await readApi(request);\r\n        } catch (e) {\r\n            setError(e);\r\n        } finally {\r\n            setIsLoading(false);\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div className={styles.container}>\r\n            <div className={styles.commandsContainer}>\r\n                <ClearChatButton className={styles.commandButton} onClick={clearChat} disabled={!lastQuestionRef.current || isLoading} />\r\n                <SettingsButton className={styles.commandButton} onClick={() => setIsConfigPanelOpen(!isConfigPanelOpen)} />\r\n            </div>\r\n            <div className={styles.chatRoot}>\r\n                <div className={styles.chatContainer}>\r\n                    {!lastQuestionRef.current ? (\r\n                        <div className={styles.chatEmptyState}>\r\n                            <SparkleFilled fontSize={\"120px\"} primaryFill={\"rgba(115, 118, 225, 1)\"} aria-hidden=\"true\" aria-label=\"Chat logo\" />\r\n                            <h1 className={styles.chatEmptyStateTitle}>Chat with your data</h1>\r\n                            <h2 className={styles.chatEmptyStateSubtitle}>Ask anything or try an example</h2>\r\n                            <ExampleList onExampleClicked={onExampleClicked} />\r\n                        </div>\r\n                    ) : (\r\n                        <div className={styles.chatMessageStream}>\r\n                            {answers.map((answer, index) => (\r\n                                <div key={index}>\r\n                                    <UserChatMessage message={answer[0]} />\r\n                                    <div className={styles.chatMessageGpt}>\r\n                                        <Answer\r\n                                            key={index}\r\n                                            answer={answer[1]}\r\n                                            isSelected={selectedAnswer === index && activeAnalysisPanelTab !== undefined}\r\n                                            onCitationClicked={c => onShowCitation(c, index)}\r\n                                            onThoughtProcessClicked={() => onToggleTab(AnalysisPanelTabs.ThoughtProcessTab, index)}\r\n                                            onSupportingContentClicked={() => onToggleTab(AnalysisPanelTabs.SupportingContentTab, index)}\r\n                                            onFollowupQuestionClicked={q => makeApiRequest(q)}\r\n                                            onReadAnswerClicked={() => onReadAnswer(answer[1], index)}\r\n                                            showFollowupQuestions={useSuggestFollowupQuestions && answers.length - 1 === index}\r\n                                        />\r\n                                    </div>\r\n                                </div>\r\n                            ))}\r\n                            {isLoading && (\r\n                                <>\r\n                                    <UserChatMessage message={lastQuestionRef.current} />\r\n                                    <div className={styles.chatMessageGptMinWidth}>\r\n                                        <AnswerLoading />\r\n                                    </div>\r\n                                </>\r\n                            )}\r\n                            {error ? (\r\n                                <>\r\n                                    <UserChatMessage message={lastQuestionRef.current} />\r\n                                    <div className={styles.chatMessageGptMinWidth}>\r\n                                        <AnswerError error={error.toString()} onRetry={() => makeApiRequest(lastQuestionRef.current)} />\r\n                                    </div>\r\n                                </>\r\n                            ) : null}\r\n                            <div ref={chatMessageStreamEnd} />\r\n                        </div>\r\n                    )}\r\n\r\n                    <div className={styles.chatInput}>\r\n                        <QuestionInput\r\n                            clearOnSend\r\n                            placeholder=\"输入问题\"\r\n                            disabled={isLoading}\r\n                            onSend={question => makeApiRequest(question)}\r\n                        />\r\n                    </div>\r\n                </div>\r\n\r\n                {answers.length > 0 && activeAnalysisPanelTab && (\r\n                    <AnalysisPanel\r\n                        className={styles.chatAnalysisPanel}\r\n                        activeCitation={activeCitation}\r\n                        onActiveTabChanged={x => onToggleTab(x, selectedAnswer)}\r\n                        citationHeight=\"810px\"\r\n                        answer={answers[selectedAnswer][1]}\r\n                        activeTab={activeAnalysisPanelTab}\r\n                    />\r\n                )}\r\n\r\n                <Panel\r\n                    headerText=\"配置\"\r\n                    isOpen={isConfigPanelOpen}\r\n                    isBlocking={false}\r\n                    onDismiss={() => setIsConfigPanelOpen(false)}\r\n                    closeButtonAriaLabel=\"Close\"\r\n                    onRenderFooterContent={() => <DefaultButton onClick={() => setIsConfigPanelOpen(false)}>Close</DefaultButton>}\r\n                    isFooterAtBottom={true}\r\n                >\r\n                    <TextField\r\n                        className={styles.chatSettingsSeparator}\r\n                        defaultValue={promptTemplate}\r\n                        label=\"更改提问模板\"\r\n                        multiline\r\n                        autoAdjustHeight\r\n                        onChange={onPromptTemplateChange}\r\n                    />\r\n\r\n                    <SpinButton\r\n                        className={styles.chatSettingsSeparator}\r\n                        label=\"最多从搜索中返回的条目数量:\"\r\n                        min={1}\r\n                        max={50}\r\n                        defaultValue={retrieveCount.toString()}\r\n                        onChange={onRetrieveCountChange}\r\n                    />\r\n                    <TextField className={styles.chatSettingsSeparator} label=\"排除类别\" onChange={onExcludeCategoryChanged} />\r\n                    <Checkbox\r\n                        className={styles.chatSettingsSeparator}\r\n                        checked={useSemanticRanker}\r\n                        label=\"使用语义搜索\"\r\n                        onChange={onUseSemanticRankerChange}\r\n                    />\r\n                    <Checkbox\r\n                        className={styles.chatSettingsSeparator}\r\n                        checked={useSemanticCaptions}\r\n                        label=\"使用查询上下文摘要而不是整个文档\"\r\n                        onChange={onUseSemanticCaptionsChange}\r\n                        disabled={!useSemanticRanker}\r\n                    />\r\n                    <Checkbox\r\n                        className={styles.chatSettingsSeparator}\r\n                        checked={useSuggestFollowupQuestions}\r\n                        label=\"建议后续问题\"\r\n                        onChange={onUseSuggestFollowupQuestionsChange}\r\n                    />\r\n                    <Checkbox\r\n                        className={styles.chatSettingsSeparator}\r\n                        checked={useBingSearch}\r\n                        label=\"启用Bing搜索\"\r\n                        onChange={onUseBingSearchChange}\r\n                    />\r\n                </Panel>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Chat;\r\n","import { Uploader } from \"uploader\";\r\nimport styles from \"./FilesViewer.module.css\";\r\nimport { File } from \"./File\";\r\nimport { UploadDropzone } from \"react-uploader\";\r\nimport { useRef, useState, useEffect, ChangeEvent } from \"react\";\r\n\r\nconst uploader = Uploader({\r\n    apiKey: \"free\"\r\n});\r\n\r\nimport {\r\n    TableBody,\r\n    TableCell,\r\n    TableRow,\r\n    Table,\r\n    TableHeader,\r\n    TableHeaderCell,\r\n    TableSelectionCell,\r\n    TableCellLayout,\r\n    useTableFeatures,\r\n    TableColumnDefinition,\r\n    useTableSelection,\r\n    useTableSort,\r\n    createTableColumn,\r\n    TableColumnId,\r\n    PresenceBadgeStatus,\r\n    Avatar,\r\n    useArrowNavigationGroup,\r\n    webLightTheme,\r\n    FluentProvider,\r\n    Button,\r\n    Dialog,\r\n    DialogTrigger,\r\n    DialogSurface,\r\n    DialogTitle,\r\n    DialogBody,\r\n    DialogActions,\r\n    ButtonProps,\r\n    Text\r\n} from \"@fluentui/react-components\";\r\nimport * as React from \"react\";\r\nimport {\r\n    FolderRegular,\r\n    EditRegular,\r\n    OpenRegular,\r\n    DocumentRegular,\r\n    PeopleRegular,\r\n    DocumentPdfRegular,\r\n    VideoRegular,\r\n    ArrowUploadRegular\r\n} from \"@fluentui/react-icons\";\r\nimport { getFileTypeIconProps, FileIconType } from \"@fluentui/react-file-type-icons\";\r\n\r\ntype FileCell = {\r\n    label: string;\r\n    icon: JSX.Element;\r\n};\r\n\r\ntype LastUpdatedCell = {\r\n    label: string;\r\n    timestamp: number;\r\n};\r\n\r\ntype LastUpdateCell = {\r\n    label: string;\r\n    icon: JSX.Element;\r\n};\r\n\r\ntype AuthorCell = {\r\n    label: string;\r\n    status: PresenceBadgeStatus;\r\n};\r\n\r\ntype PathCell = {\r\n    label: string;\r\n};\r\n\r\ntype Item = {\r\n    file: FileCell;\r\n    author: AuthorCell;\r\n    lastUpdated: LastUpdatedCell;\r\n    lastUpdate: LastUpdateCell;\r\n    filePath: PathCell;\r\n};\r\n\r\nconst items: Item[] = [\r\n    {\r\n        file: { label: \"Meeting notes\", icon: <DocumentRegular /> },\r\n        author: { label: \"Max Mustermann\", status: \"available\" },\r\n        lastUpdated: { label: \"7h ago\", timestamp: 3 },\r\n        lastUpdate: {\r\n            label: \"You edited this\",\r\n            icon: <EditRegular />\r\n        },\r\n        filePath: { label: \"http://xxx.blob.azure.com/abc.pdf\" }\r\n    },\r\n    {\r\n        file: { label: \"Thursday presentation\", icon: <FolderRegular /> },\r\n        author: { label: \"Erika Mustermann\", status: \"busy\" },\r\n        lastUpdated: { label: \"Yesterday at 1:45 PM\", timestamp: 2 },\r\n        lastUpdate: {\r\n            label: \"You recently opened this\",\r\n            icon: <OpenRegular />\r\n        },\r\n        filePath: { label: \"http://xxx.blob.azure.com/abc.pdf\" }\r\n    },\r\n    {\r\n        file: { label: \"Training recording\", icon: <VideoRegular /> },\r\n        author: { label: \"John Doe\", status: \"away\" },\r\n        lastUpdated: { label: \"Yesterday at 1:45 PM\", timestamp: 2 },\r\n        lastUpdate: {\r\n            label: \"You recently opened this\",\r\n            icon: <OpenRegular />\r\n        },\r\n        filePath: { label: \"http://xxx.blob.azure.com/abc.pdf\" }\r\n    },\r\n    {\r\n        file: { label: \"Purchase order\", icon: <DocumentPdfRegular /> },\r\n        author: { label: \"Jane Doe\", status: \"offline\" },\r\n        lastUpdated: { label: \"Tue at 9:30 AM\", timestamp: 1 },\r\n        lastUpdate: {\r\n            label: \"You shared this in a Teams chat\",\r\n            icon: <PeopleRegular />\r\n        },\r\n        filePath: { label: \"http://xxx.blob.azure.com/abc.pdf\" }\r\n    }\r\n];\r\n\r\nconst columns: TableColumnDefinition<Item>[] = [\r\n    createTableColumn<Item>({\r\n        columnId: \"file\",\r\n        compare: (a: { file: { label: string } }, b: { file: { label: string } }) => {\r\n            return a.file.label.localeCompare(b.file.label);\r\n        }\r\n    }),\r\n    createTableColumn<Item>({\r\n        columnId: \"author\",\r\n        compare: (a: { author: { label: string } }, b: { author: { label: string } }) => {\r\n            return a.author.label.localeCompare(b.author.label);\r\n        }\r\n    }),\r\n    createTableColumn<Item>({\r\n        columnId: \"lastUpdated\",\r\n        compare: (a: { lastUpdated: { timestamp: number } }, b: { lastUpdated: { timestamp: number } }) => {\r\n            return a.lastUpdated.timestamp - b.lastUpdated.timestamp;\r\n        }\r\n    }),\r\n    createTableColumn<Item>({\r\n        columnId: \"lastUpdate\",\r\n        compare: (a: { lastUpdate: { label: string } }, b: { lastUpdate: { label: any } }) => {\r\n            return a.lastUpdate.label.localeCompare(b.lastUpdate.label);\r\n        }\r\n    }),\r\n    createTableColumn<Item>({\r\n        columnId: \"filePath\",\r\n        compare: (a: { filePath: { label: string } }, b: { filePath: { label: any } }) => {\r\n            return a.filePath.label.localeCompare(b.filePath.label);\r\n        }\r\n    })\r\n];\r\n\r\nexport const DataGrid = () => {\r\n    const {\r\n        getRows,\r\n        selection: { allRowsSelected, someRowsSelected, toggleAllRows, toggleRow, isRowSelected },\r\n        sort: { getSortDirection, toggleColumnSort, sort }\r\n    } = useTableFeatures(\r\n        {\r\n            columns,\r\n            items\r\n        },\r\n        [\r\n            useTableSelection({\r\n                selectionMode: \"multiselect\",\r\n                defaultSelectedItems: new Set([]),\r\n            }),\r\n            useTableSort({\r\n                defaultSortState: { sortColumn: \"file\", sortDirection: \"ascending\" }\r\n            })\r\n        ]\r\n    );\r\n\r\n    const [file, setFile] = useState<File>()\r\n\r\n    const handleFileChange = (e: ChangeEvent<HTMLInputElement>) => {\r\n        if (!e.target.files) {\r\n            return;\r\n          }\r\n\r\n        if (e.target.files) {\r\n          setFile(e.target.files[0]);\r\n        }\r\n      };\r\n\r\n    const handleUploadFile = () => {\r\n        if (!file) {\r\n            return;\r\n        }\r\n        console.log(file)\r\n        \r\n        const formData = new FormData();\r\n\r\n        formData.append(\"name\", file.name);\r\n\r\n        formData.append(\"file\", file);\r\n\r\n        fetch('/uploadFile', {\r\n        //   mode: \"cors\",\r\n          method: 'POST',\r\n          body: formData,\r\n          headers: {\r\n            // 'content-type': file.type,\r\n            // 'content-length': `${file.size}`, // 👈 Headers need to be a string\r\n          },\r\n        }).then((response) => {\r\n          response.json()\r\n        }).then((data) => console.log(data))\r\n        .then((err) => console.log(err))\r\n      }\r\n\r\n    const rows = sort(\r\n        getRows(row => {\r\n            const selected = isRowSelected(row.rowId);\r\n            return {\r\n                ...row,\r\n                onClick: (e: React.MouseEvent) => toggleRow(e, row.rowId),\r\n                onKeyDown: (e: React.KeyboardEvent) => {\r\n                    if (e.key === \" \") {\r\n                        e.preventDefault();\r\n                        toggleRow(e, row.rowId);\r\n                    }\r\n                },\r\n                selected,\r\n                appearance: selected ? (\"brand\" as const) : (\"none\" as const)\r\n            };\r\n        })\r\n    );\r\n\r\n    const headerSortProps = (columnId: TableColumnId) => ({\r\n        onClick: (e: React.MouseEvent) => {\r\n            toggleColumnSort(e, columnId);\r\n        },\r\n        sortDirection: getSortDirection(columnId)\r\n    });\r\n\r\n    const keyboardNavAttr = useArrowNavigationGroup({ axis: \"grid\" });\r\n\r\n    const uploaderOptions = {\r\n        multi: true,\r\n\r\n        // Comment out this line & use 'onUpdate' instead of\r\n        // 'onComplete' to have the dropzone close after upload.\r\n        showFinishButton: true,\r\n\r\n        styles: {\r\n            colors: {\r\n                primary: \"#377dff\"\r\n            }\r\n        }\r\n    };\r\n\r\n\r\n\r\n    return (\r\n        <div className={styles.container}>\r\n            <FluentProvider theme={webLightTheme}>\r\n                <Table {...keyboardNavAttr} role=\"grid\" sortable aria-label=\"DataGrid implementation with Table primitives\">\r\n                    <TableHeader>\r\n                        <TableRow>\r\n                            <TableSelectionCell\r\n                                checked={allRowsSelected ? true : someRowsSelected ? \"mixed\" : false}\r\n                                aria-checked={allRowsSelected ? true : someRowsSelected ? \"mixed\" : false}\r\n                                role=\"checkbox\"\r\n                                onClick={toggleAllRows}\r\n                                checkboxIndicator={{ \"aria-label\": \"Select all rows \" }}\r\n                            />\r\n\r\n                            <TableHeaderCell {...headerSortProps(\"file\")}>File</TableHeaderCell>\r\n                            <TableHeaderCell {...headerSortProps(\"author\")}>Author</TableHeaderCell>\r\n                            <TableHeaderCell {...headerSortProps(\"lastUpdated\")}>Last updated</TableHeaderCell>\r\n                            <TableHeaderCell {...headerSortProps(\"lastUpdate\")}>Last update</TableHeaderCell>\r\n                            <TableHeaderCell {...headerSortProps(\"filePath\")}>Path</TableHeaderCell>\r\n                        </TableRow>\r\n                    </TableHeader>\r\n                    <TableBody>\r\n                        {rows.map(({ item, selected, onClick, onKeyDown, appearance }) => (\r\n                            <TableRow key={item.file.label} onClick={onClick} onKeyDown={onKeyDown} aria-selected={selected} appearance={appearance}>\r\n                                <TableSelectionCell\r\n                                    role=\"gridcell\"\r\n                                    aria-selected={selected}\r\n                                    checked={selected}\r\n                                    checkboxIndicator={{ \"aria-label\": \"Select row\" }}\r\n                                />\r\n\r\n                                <TableCell tabIndex={0} role=\"gridcell\" aria-selected={selected}>\r\n                                    <TableCellLayout media={item.file.icon}>{item.file.label}</TableCellLayout>\r\n                                </TableCell>\r\n                                <TableCell tabIndex={0} role=\"gridcell\">\r\n                                    <TableCellLayout\r\n                                        media={<Avatar aria-label={item.author.label} name={item.author.label} badge={{ status: item.author.status }} />}\r\n                                    >\r\n                                        {item.author.label}\r\n                                    </TableCellLayout>\r\n                                </TableCell>\r\n                                <TableCell tabIndex={0} role=\"gridcell\">\r\n                                    {item.lastUpdated.label}\r\n                                </TableCell>\r\n                                <TableCell tabIndex={0} role=\"gridcell\">\r\n                                    <TableCellLayout media={item.lastUpdate.icon}>{item.lastUpdate.label}</TableCellLayout>\r\n                                </TableCell>\r\n                                <TableCell tabIndex={0} role=\"gridcell\">\r\n                                    <TableCellLayout>{item.filePath.label}</TableCellLayout>\r\n                                </TableCell>\r\n                            </TableRow>\r\n                        ))}\r\n                    </TableBody>\r\n                </Table>\r\n                <div className={styles.processButtonGroup}>\r\n                    <Dialog>\r\n                        <DialogTrigger disableButtonEnhancement>\r\n                            <Button>处理选中文档</Button>\r\n                        </DialogTrigger>\r\n                        <DialogSurface>\r\n                            <DialogTitle>处理选中文档</DialogTitle>\r\n                            <DialogBody>\r\n                                <Text>确认处理选中文档? 这将重新处理选中文档。</Text>\r\n                            </DialogBody>\r\n                            <DialogActions>\r\n                                <DialogTrigger disableButtonEnhancement>\r\n                                    <Button appearance=\"secondary\">取消</Button>\r\n                                </DialogTrigger>\r\n                                <Button appearance=\"primary\" >确认</Button>\r\n                            </DialogActions>\r\n                        </DialogSurface>\r\n                    </Dialog>\r\n                    <Dialog>\r\n                        <DialogTrigger disableButtonEnhancement>\r\n                            <Button>处理全部文档</Button>\r\n                        </DialogTrigger>\r\n                        <DialogSurface>\r\n                            <DialogTitle>处理全部文档</DialogTitle>\r\n                            <DialogBody>\r\n                                <Text>确认处理全部文档? 这将重新处理全部文档。</Text>\r\n                            </DialogBody>\r\n                            <DialogActions>\r\n                                <DialogTrigger disableButtonEnhancement>\r\n                                    <Button appearance=\"secondary\">取消</Button>\r\n                                </DialogTrigger>\r\n                                <Button appearance=\"primary\">确认</Button>\r\n                            </DialogActions>\r\n                        </DialogSurface>\r\n                    </Dialog>\r\n                    <Dialog>\r\n                        <DialogTrigger disableButtonEnhancement>\r\n                            <Button icon={<ArrowUploadRegular />}>上传新文档</Button>\r\n                        </DialogTrigger>\r\n                        <DialogSurface>\r\n                            <DialogTitle>上传新文档</DialogTitle>\r\n                            <DialogBody>\r\n                                    <input type=\"file\" onChange={handleFileChange} name=\"file\"/>\r\n                                    <div>{file && `${file.name} - ${file.type}`}</div>\r\n                            </DialogBody>\r\n                            <DialogActions>\r\n                                <DialogTrigger disableButtonEnhancement>\r\n                                    <Button appearance=\"secondary\">取消</Button>\r\n                                </DialogTrigger>\r\n                                <Button appearance=\"primary\" onClick={handleUploadFile}>确认</Button>\r\n                            </DialogActions>\r\n                        </DialogSurface>\r\n                    </Dialog>\r\n                </div>\r\n            </FluentProvider>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport type FileModel = {\r\n    name: string;\r\n    path: string;\r\n    processed: boolean;\r\n};\r\n\r\nconst EXAMPLES: FileModel[] = [\r\n    { name: \"abc.pdf\", path: \"http://xxx.blob.azure.com/abc.pdf\", processed: false },\r\n    { name: \"info.pdf\", path: \"http://xxx.blob.azure.com/info.pdf\", processed: true }\r\n];\r\n\r\ninterface Props {\r\n    onFileProcess: (path: string) => void;\r\n    onFileDelete: (path: string) => void;\r\n}\r\n\r\nexport const Files = ({ onFileProcess, onFileDelete }: Props) => {\r\n    return (\r\n        <div className={styles.filesTable}>\r\n            <table>\r\n                <tr>\r\n                    <th>\r\n                        <td>Name</td>\r\n                        <td>Path</td>\r\n                        <td>Processed</td>\r\n                        <td>Action</td>\r\n                    </th>\r\n                </tr>\r\n                {EXAMPLES.map((x, i) => (\r\n                    <File name={x.name} path={x.path} processed={x.processed} onProcess={onFileProcess} onDelete={onFileDelete} />\r\n                ))}\r\n            </table>\r\n        </div>\r\n    );\r\n};\r\n","import styles from \"./Files.module.css\";\r\nimport { Files, DataGrid } from \"../../components/FilesViewer/FilesViewer\";\r\nimport { ChangeEvent, useState } from 'react';\r\n\r\nconst FilesViewer = () => {\r\n    \r\n    const [file, setFile] = useState<File>()\r\n\r\n    const handleFileChange = (e: ChangeEvent<HTMLInputElement>) => {\r\n        if (e.target.files) {\r\n          setFile(e.target.files[0]);\r\n        }\r\n      };\r\n\r\n    const handleUploadFile = () => {\r\n        if (!file) {\r\n            return;\r\n        }\r\n    \r\n        const data = new FormData();\r\n    \r\n        fetch('/uploadFile', {\r\n          method: 'POST',\r\n          body: file,\r\n          headers: {\r\n            'content-type': file.type,\r\n            'content-length': `${file.size}`, // 👈 Headers need to be a string\r\n          },\r\n        }).then((response) => {\r\n          response.json()\r\n        }).then((data) => console.log(data))\r\n        .then((err) => console.log(err))\r\n      }\r\n\r\n    return (\r\n        <div>\r\n            <div>\r\n                <div className={styles.filesViewer}>\r\n                    <DataGrid/>\r\n                </div>\r\n                <div>\r\n                    <input type=\"file\" onChange={handleFileChange} />\r\n                    <div>{file && `${file.name} - ${file.type}`}</div>\r\n                    <button onClick={handleUploadFile}>Upload</button>\r\n                </div>\r\n            \r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default FilesViewer;","import React from \"react\";\r\nimport ReactDOM from \"react-dom/client\";\r\nimport { HashRouter, Routes, Route } from \"react-router-dom\";\r\nimport { initializeIcons } from \"@fluentui/react\";\r\nimport { initializeFileTypeIcons } from '@fluentui/react-file-type-icons';\r\ninitializeFileTypeIcons(/* optional base url */);\r\n\r\n\r\nimport \"./index.css\";\r\n\r\nimport Layout from \"./pages/layout/Layout\";\r\nimport NoPage from \"./pages/NoPage\";\r\nimport OneShot from \"./pages/oneshot/OneShot\";\r\nimport Chat from \"./pages/chat/Chat\";\r\nimport Files from \"./pages/fileViewer/Files\";\r\n\r\ninitializeIcons();\r\n\r\nexport default function App() {\r\n    return (\r\n        <HashRouter>\r\n            <Routes>\r\n                <Route path=\"/\" element={<Layout />}>\r\n                    <Route index element={<Chat />} />\r\n                    <Route path=\"qa\" element={<OneShot />} />\r\n                    <Route path=\"files\" element={<Files/>} />\r\n                    <Route path=\"*\" element={<NoPage />} />\r\n                </Route>\r\n            </Routes>\r\n        </HashRouter>\r\n    );\r\n}\r\n\r\nReactDOM.createRoot(document.getElementById(\"root\") as HTMLElement).render(\r\n    <React.StrictMode>\r\n        <App />\r\n    </React.StrictMode>\r\n);\r\n"],"names":["styles","isActive","options","response","_a","_b","_c","_d","_e","_f","_g","_h","parsedResponse","_i","_j","speech_key","speech_region","speechConfig","audioConfig","synthesizer","modified_text","result","err","citation","Approaches","answer","onCitationClicked","citations","followupQuestions","parsedAnswer","match","content","parts","citation_map","index","name","path","part","cite","citationIndex","isSelected","onThoughtProcessClicked","onSupportingContentClicked","onFollowupQuestionClicked","onReadAnswerClicked","showFollowupQuestions","useMemo","sanitizedAnswerHtml","DOMPurify","x","i","animatedStyles","useSpring","animated","error","onRetry","onSend","disabled","placeholder","clearOnSend","question","setQuestion","useState","sendQuestion","speechToText","speechRecognizer","cancellation","onEnterPress","ev","onQuestionChange","_ev","newValue","sendQuestionDisabled","text","value","onClick","onExampleClicked","parsed","AnalysisPanelTabs","activeTab","activeCitation","citationHeight","className","onActiveTabChanged","isDisabledThoughtProcessTab","isDisabledSupportingContentTab","isDisabledCitationTab","sanitizedThoughts","pivotItem","isConfigPanelOpen","setIsConfigPanelOpen","approach","setApproach","promptTemplate","setPromptTemplate","promptTemplatePrefix","setPromptTemplatePrefix","promptTemplateSuffix","setPromptTemplateSuffix","retrieveCount","setRetrieveCount","useSemanticRanker","setUseSemanticRanker","useSemanticCaptions","setUseSemanticCaptions","excludeCategory","setExcludeCategory","lastQuestionRef","useRef","isLoading","setIsLoading","setError","setAnswer","setActiveCitation","activeAnalysisPanelTab","setActiveAnalysisPanelTab","makeApiRequest","request","e","onPromptTemplateChange","onPromptTemplatePrefixChange","onPromptTemplateSuffixChange","onRetrieveCountChange","onApproachChange","option","onUseSemanticRankerChange","checked","onUseSemanticCaptionsChange","onExcludeCategoryChanged","example","onShowCitation","onToggleTab","tab","approaches","message","useSuggestFollowupQuestions","setUseSuggestFollowupQuestions","useBingSearch","setUseBingSearch","chatMessageStreamEnd","selectedAnswer","setSelectedAnswer","answers","setAnswers","a","clearChat","useEffect","onUseSuggestFollowupQuestionsChange","onUseBingSearchChange","onReadAnswer","c","q","Uploader","b","getRows","allRowsSelected","someRowsSelected","toggleAllRows","toggleRow","isRowSelected","getSortDirection","toggleColumnSort","sort","file","setFile","handleFileChange","handleUploadFile","formData","data","rows","row","selected","headerSortProps","columnId","keyboardNavAttr","item","onKeyDown","appearance","Text","Files","ReactDOM"],"mappings":"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"}